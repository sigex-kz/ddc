# options for analysis running
run:
  # default concurrency is a available CPU number
  # concurrency: 4

  # timeout for analysis, e.g. 30s, 5m, default is 1m
  timeout: 15m

  # exit code when at least one issue was found, default is 1
  issues-exit-code: 1

  # include test files or not, default is true
  tests: true

  # list of build tags, all linters use it. Default is empty list.
  #build-tags:
  #  - mytag

  # which dirs to skip: issues from them won't be reported;
  # can use regexp here: generated.*, regexp is applied on full path;
  # default value is empty list, but default dirs are skipped independently
  # from this option's value (see skip-dirs-use-default).
  # "/" will be replaced by current OS file path separator to properly work
  # on Windows.
  skip-dirs:
    - vendor

  # default is true. Enables skipping of directories:
  #   vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
  skip-dirs-use-default: true

  # which files to skip: they will be analyzed, but issues from them
  # won't be reported. Default value is empty list, but there is
  # no need to include all autogenerated files, we confidently recognize
  # autogenerated files. If it's not please let us know.
  # "/" will be replaced by current OS file path separator to properly work
  # on Windows.
  #skip-files:
  #  - ".*\\.my\\.go$"
  #  - lib/bad.go

  # by default isn't set. If set we pass it to "go list -mod={option}". From "go help modules":
  # If invoked with -mod=readonly, the go command is disallowed from the implicit
  # automatic updating of go.mod described above. Instead, it fails when any changes
  # to go.mod are needed. This setting is most useful to check that go.mod does
  # not need updates, such as in a continuous integration and testing system.
  # If invoked with -mod=vendor, the go command assumes that the vendor
  # directory holds the correct copies of dependencies and ignores
  # the dependency descriptions in go.mod.
  modules-download-mode: vendor

  # Allow multiple parallel golangci-lint instances running.
  # If false (default) - golangci-lint acquires file lock on start.
  allow-parallel-runners: false

  # Define the Go version limit.
  # Mainly related to generics support since go1.18.
  # Default: use Go version from the go.mod file, fallback on the env var `GOVERSION`, fallback on 1.20
  go: '1.21'

# output configuration options
output:
  # colored-line-number|line-number|json|tab|checkstyle|code-climate, default is "colored-line-number"
  format: colored-line-number

  # print lines of code with issue, default is true
  print-issued-lines: true

  # print linter name in the end of issue text, default is true
  print-linter-name: true

  # make issues output unique by line, default is true
  uniq-by-line: true


# all available settings of specific linters
linters-settings:
  asasalint:
    # To specify a set of function names to exclude.
    # The values are merged with the builtin exclusions.
    # The builtin exclusions can be disabled by setting `use-builtin-exclusions` to `false`.
    # Default: ["^(fmt|log|logger|t|)\.(Print|Fprint|Sprint|Fatal|Panic|Error|Warn|Warning|Info|Debug|Log)(|f|ln)$"]
    exclude:
      - Append
      - \.Wrapf
    # To enable/disable the asasalint builtin exclusions of function names.
    # See the default value of `exclude` to get the builtin exclusions.
    # Default: true
    use-builtin-exclusions: true
    # Ignore *_test.go files.
    # Default: false
    ignore-test: false
  #dogsled:
    # checks assignments with too many blank identifiers; default is 2
    #max-blank-identifiers: 2
  #dupl:
    # tokens count to trigger issue, 150 by default
   # threshold: 100
  errcheck:
    # report about not checking of errors in type assertions: `a := b.(MyStruct)`;
    # default is false: such cases aren't reported by default.
    check-type-assertions: true

    # report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`;
    # default is false: such cases aren't reported by default.
    check-blank: true

    # [deprecated] comma-separated list of pairs of the form pkg:regex
    # the regex is used to ignore names within pkg. (default "fmt:.*").
    # see https://github.com/kisielk/errcheck#the-deprecated-method for details
    # ignore: fmt:.*,io:^Read.*,os:^Read.*

    # path to a file containing a list of functions to exclude from checking
    # see https://github.com/kisielk/errcheck#excluding-functions for details
    #exclude: /path/to/file.txt
  #exhaustive:
    # indicates that switch statements are to be considered exhaustive if a
    # 'default' case is present, even if all enum members aren't listed in the
    # switch
    #default-signifies-exhaustive: false
  #funlen:
    #lines: 100
    #statements: 50
  #gocognit:
    # minimal code complexity to report, 30 by default (but we recommend 10-20)
    #min-complexity: 15
  #nestif:
    # minimal complexity of if statements to report, 5 by default
    #min-complexity: 4
  goconst:
    # minimal length of string constant, 3 by default
    min-len: 3
    # minimal occurrences count to trigger, 3 by default
    min-occurrences: 3
  gocritic:
    # Which checks should be enabled; can't be combined with 'disabled-checks';
    # See https://go-critic.github.io/overview#checks-overview
    # To check which checks are enabled run `GL_DEBUG=gocritic golangci-lint run`
    # By default list of stable checks is used.
    #enabled-checks:
      #- rangeValCopy

    # Which checks should be disabled; can't be combined with 'enabled-checks'; default is empty
    disabled-checks:
      - dupImport # https://github.com/go-critic/go-critic/issues/845
      - timeCmpSimplify # https://github.com/go-critic/go-critic/issues/1257
      - uncheckedInlineErr # false positives on if checked errors

    # Enable multiple checks by tags, run `GL_DEBUG=gocritic golangci-lint run` to see all tags and checks.
    # Empty list by default. See https://github.com/go-critic/go-critic#usage -> section "Tags".
    enabled-tags:
      - diagnostic
      - experimental
      - opinionated
      - performance
      - style

    #disabled-tags:
      #- experimental

    #settings: # settings passed to gocritic
        #paramsOnly: true
      #rangeValCopy:
        #sizeThreshold: 128

  #gocyclo:
    # minimal code complexity to report, 30 by default (but we recommend 10-20)
    #min-complexity: 15
  #godot:
    # check all top-level comments, not only declarations
    #check-all: false
  #godox:
    # report any comments starting with keywords, this is useful for TODO or FIXME comments that
    # might be left in the code accidentally and should be resolved before merging
    #keywords: # default keywords are TODO, BUG, and FIXME, these can be overwritten by this setting
      #- TODO # marks hack-arounds that should be removed before merging
  gofmt:
    # simplify code: gofmt with `-s` option, true by default
    simplify: true
  #goimports:
    # put imports beginning with prefix after 3rd-party packages;
    # it's a comma-separated list of prefixes
  #golint:
    # minimal confidence for issues, default is 0.8
    #min-confidence: 0
  gomnd:
    settings:
      mnd:
        # don't include the "operation" and "assign"
        checks: [argument,case,condition,return]
        ignored-functions: strconv.ParseInt,strconv.FormatInt,os.MkdirAll,os.OpenFile
  #gomodguard:
    #allowed:
      #modules:                                                        # List of allowed modules
        # - gopkg.in/yaml.v2
      #domains:                                                        # List of allowed module domains
        # - golang.org
    #blocked:
      #modules:                                                        # List of blocked modules
        # - github.com/uudashr/go-module:                             # Blocked module
        #     recommendations:                                        # Recommended modules that should be used instead (Optional)
        #       - golang.org/x/mod
        #     reason: "`mod` is the official go.mod parser library."  # Reason why the recommended module should be used (Optional)
      #versions:                                                       # List of blocked module version constraints
        # - github.com/mitchellh/go-homedir:                          # Blocked module with version constraint
        #     version: "< 1.1.0"                                      # Version constraint, see https://github.com/Masterminds/semver#basic-comparisons
        #     reason: "testing if blocked version constraint works."  # Reason why the version constraint exists. (Optional)
  gosec:
    # To select a subset of rules to run.
    # Available rules: https://github.com/securego/gosec#available-rules
    # Default: [] - means include all rules
    #includes:
      # - G101 # Look for hard coded credentials
      # - G102 # Bind to all interfaces
      # - G103 # Audit the use of unsafe block
      # - G104 # Audit errors not checked
      # - G106 # Audit the use of ssh.InsecureIgnoreHostKey
      # - G107 # Url provided to HTTP request as taint input
      # - G108 # Profiling endpoint automatically exposed on /debug/pprof
      # - G109 # Potential Integer overflow made by strconv.Atoi result conversion to int16/32
      # - G110 # Potential DoS vulnerability via decompression bomb
      # - G111 # Potential directory traversal
      # - G112 # Potential slowloris attack
      # - G113 # Usage of Rat.SetString in math/big with an overflow (CVE-2022-23772)
      # - G114 # Use of net/http serve function that has no support for setting timeouts
      # - G201 # SQL query construction using format string
      # - G202 # SQL query construction using string concatenation
      # - G203 # Use of unescaped data in HTML templates
      # - G204 # Audit use of command execution
      # - G301 # Poor file permissions used when creating a directory
      # - G302 # Poor file permissions used with chmod
      # - G303 # Creating tempfile using a predictable path
      # - G304 # File path provided as taint input
      # - G305 # File traversal when extracting zip/tar archive
      # - G306 # Poor file permissions used when writing to a new file
      # - G307 # Deferring a method which returns an error
      # - G401 # Detect the usage of DES, RC4, MD5 or SHA1
      # - G402 # Look for bad TLS connection settings
      # - G403 # Ensure minimum RSA key length of 2048 bits
      # - G404 # Insecure random number source (rand)
      # - G501 # Import blocklist: crypto/md5
      # - G502 # Import blocklist: crypto/des
      # - G503 # Import blocklist: crypto/rc4
      # - G504 # Import blocklist: net/http/cgi
      # - G505 # Import blocklist: crypto/sha1
      # - G601 # Implicit memory aliasing of items from a range statement
      # - G602 # Slice access out of bounds
    # To specify a set of rules to explicitly exclude.
    # Available rules: https://github.com/securego/gosec#available-rules
    # Default: []
    excludes:
      - G602 # Slice access out of bounds # Performance issues in version 1.54.2
    # Exclude generated files
    # Default: false
    exclude-generated: true
    # Filter out the issues with a lower severity than the given value.
    # Valid options are: low, medium, high.
    # Default: low
    #severity: medium
    # Filter out the issues with a lower confidence than the given value.
    # Valid options are: low, medium, high.
    # Default: low
    #confidence: medium
    # Concurrency value.
    # Default: the number of logical CPUs usable by the current process.
    #concurrency: 12
    # To specify the configuration of rules.
    #config:
      # Globals are applicable to all rules.
      #global:
        # If true, ignore #nosec in comments (and an alternative as well).
        # Default: false
        #nosec: true
        # Add an alternative comment prefix to #nosec (both will work at the same time).
        # Default: ""
        #"#nosec": "#my-custom-nosec"
        # Define whether nosec issues are counted as finding or not.
        # Default: false
        #show-ignored: true
        # Audit mode enables addition checks that for normal code analysis might be too nosy.
        # Default: false
        #audit: true
      #G101:
        # Regexp pattern for variables and constants to find.
        # Default: "(?i)passwd|pass|password|pwd|secret|token|pw|apiKey|bearer|cred"
        #pattern: "(?i)example"
        # If true, complain about all cases (even with low entropy).
        # Default: false
        #ignore_entropy: false
        # Maximum allowed entropy of the string.
        # Default: "80.0"
        #entropy_threshold: "80.0"
        # Maximum allowed value of entropy/string length.
        # Is taken into account if entropy >= entropy_threshold/2.
        # Default: "3.0"
        #per_char_threshold: "3.0"
        # Calculate entropy for first N chars of the string.
        # Default: "16"
        #truncate: "32"
      # Additional functions to ignore while checking unhandled errors.
      # Following functions always ignored:
      #   bytes.Buffer:
      #     - Write
      #     - WriteByte
      #     - WriteRune
      #     - WriteString
      #   fmt:
      #     - Print
      #     - Printf
      #     - Println
      #     - Fprint
      #     - Fprintf
      #     - Fprintln
      #   strings.Builder:
      #     - Write
      #     - WriteByte
      #     - WriteRune
      #     - WriteString
      #   io.PipeWriter:
      #     - CloseWithError
      #   hash.Hash:
      #     - Write
      #   os:
      #     - Unsetenv
      # Default: {}
      #G104:
        #fmt:
          #- Fscanf
      #G111:
        # Regexp pattern to find potential directory traversal.
        # Default: "http\\.Dir\\(\"\\/\"\\)|http\\.Dir\\('\\/'\\)"
        #pattern: "custom\\.Dir\\(\\)"
      # Maximum allowed permissions mode for os.Mkdir and os.MkdirAll
      # Default: "0750"
      #G301: "0750"
      # Maximum allowed permissions mode for os.OpenFile and os.Chmod
      # Default: "0600"
      #G302: "0600"
      # Maximum allowed permissions mode for os.WriteFile and ioutil.WriteFile
      # Default: "0600"
      #G306: "0600"
  govet:
    # report about shadowed variables
    check-shadowing: true

    # settings per analyzer
    settings:
      printf: # analyzer name, run `go tool vet help` to see all analyzers
        funcs: # run `go tool vet help printf` to see available settings for `printf` analyzer
          #- (github.com/golangci/golangci-lint/pkg/logutils.Log).Fatalf

    # enable or disable analyzers by name
    #enable:
      #- fieldalignment
      #- atomicalign
    #enable-all: false
    #disable:
      #- shadow
    #disable-all: false
  #depguard:
    #list-type: blacklist
    #include-go-root: false
    #packages:
      #- github.com/sirupsen/logrus
    #packages-with-error-message:
      # specify an error message to output when a blacklisted package is used
      #- github.com/sirupsen/logrus: "logging is allowed only by logutils.Log"
  lll:
    # max line length, lines longer will be reported. Default is 120.
    # '\t' is counted as 1 character by default, and can be changed with the tab-width option
    line-length: 140
    # tab width in spaces. Default to 1.
    tab-width: 2
  # maligned:
    # print struct with more effective memory layout or not, false by default
    # suggest-new: true
  #misspell:
    # Correct spellings using locale preferences for US or UK.
    # Default is to use a neutral variety of English.
    # Setting locale to US will correct the British spelling of 'colour' to 'color'.
    #locale: US
    #ignore-words:
      #- someword
  nakedret:
    # make an issue if func has more lines of code than this setting and it has naked returns; default is 30
    max-func-lines: 30
  prealloc:
    # XXX: we don't recommend using this linter before doing performance profiling.
    # For most programs usage of prealloc will be a premature optimization.

    # Report pre-allocation suggestions only on simple loops that have no returns/breaks/continues/gotos in them.
    # Default: true
    simple: true
    # Report pre-allocation suggestions on range loops.
    # Default: true
    range-loops: true
    # Report pre-allocation suggestions on for loops.
    # Default: false
    for-loops: true
  predeclared:
    # Comma-separated list of predeclared identifiers to not report on.
    # Default: ""
    ignore: "new,int"
    # Include method names and field names (i.e., qualified names) in checks.
    # Default: false
    q: true
  promlinter:
    # Promlinter cannot infer all metrics name in static analysis.
    # Enable strict mode will also include the errors caused by failing to parse the args.
    # Default: false
    strict: true
    # Please refer to https://github.com/yeya24/promlinter#usage for detailed usage.
    # Default: []
    disabled-linters:
      - Help
      #- MetricUnits
      - Counter
      - HistogramSummaryReserved
      - MetricTypeInName
      - ReservedChars
      - CamelCase
      - UnitAbbreviations
  nolintlint:
    # Enable to ensure that nolint directives are all used. Default is true.
    allow-unused: false
    # Disable to ensure that nolint directives don't have a leading space. Default is true.
    allow-leading-space: false
    # Exclude following linters from requiring an explanation.  Default is [].
    allow-no-explanation: []
    # Enable to require an explanation of nonzero length after each nolint directive. Default is false.
    require-explanation: true
    # Enable to require nolint directives to mention the specific linter being suppressed. Default is false.
    require-specific: true
  revive:
    # see https://github.com/mgechev/revive#available-rules for details.
    ignore-generated-header: false
    severity: warning
    confidence: 0.8
    errorCode: 0
    warningCode: 0
    rules:
      - name: blank-imports
      - name: context-as-argument
      - name: context-keys-type
      - name: dot-imports
      - name: error-return
      - name: error-strings
      - name: error-naming
      - name: exported
      - name: if-return
      - name: increment-decrement
      - name: var-naming
      - name: var-declaration
      - name: package-comments
      - name: range
      - name: receiver-naming
      - name: time-naming
      - name: unexported-return
      - name: indent-error-flow
      - name: errorf
      - name: empty-block
      - name: superfluous-else
      - name: unused-parameter
      - name: unreachable-code
      - name: redefines-builtin-id
      #- name: indent-error-flow
        #severity: warning
      #- name: add-constant
        #severity: warning
        #arguments:
          #- maxLitCount: "3"
            #allowStrs: '""'
            #allowInts: "0,1,2"
            #allowFloats: "0.0,0.,1.0,1.,2.0,2."
  rowserrcheck:
    packages:
      - github.com/jmoiron/sqlx
  tagalign:
    # Align and sort can be used together or separately.
    #
    # Whether enable align. If true, the struct tags will be aligned.
    # eg:
    # type FooBar struct {
    #     Bar    string `json:"bar" validate:"required"`
    #     FooFoo int8   `json:"foo_foo" validate:"required"`
    # }
    # will be formatted to:
    # type FooBar struct {
    #     Bar    string `json:"bar"     validate:"required"`
    #     FooFoo int8   `json:"foo_foo" validate:"required"`
    # }
    # Default: true.
    align: true
    # Whether enable tags sort.
    # If true, the tags will be sorted by name in ascending order.
    # eg: `xml:"bar" json:"bar" validate:"required"` -> `json:"bar" validate:"required" xml:"bar"`
    # Default: true
    sort: true
    # Specify the order of tags, the other tags will be sorted by name.
    # This option will be ignored if `sort` is false.
    # Default: []
    order:
      - default
      - yaml
      - json
      - koanf
      - validate
    # Whether enable strict style.
    # In this style, the tags will be sorted and aligned in the dictionary order,
    # and the tags with the same name will be aligned together.
    # Note: This option will be ignored if 'align' or 'sort' is false.
    # Default: false
    strict: true
  #testpackage:
    # regexp pattern to skip files
    #skip-regexp: (export|internal)_test\.go
  #unparam:
    # Inspect exported functions, default is false. Set to true if no external program/library imports your code.
    # XXX: if you enable this setting, unparam will report a lot of false-positives in text editors:
    # if it's called for subdir of a project it can't find external interfaces. All text editor integrations
    # with golangci-lint call it on a directory with the changed file.
    #check-exported: false
  #unused:
    # treat code as a program (not a library) and report unused exported identifiers; default is false.
    # XXX: if you enable this setting, unused will report a lot of false-positives in text editors:
    # if it's called for subdir of a project it can't find funcs usages. All text editor integrations
    # with golangci-lint call it on a directory with the changed file.
    #check-exported: false
  #whitespace:
    #multi-if: false   # Enforces newlines (or comments) after every multi-line if statement
    #multi-func: false # Enforces newlines (or comments) after every multi-line function signature

  wsl:
    # If true append is only allowed to be cuddled if appending value is
    # matching variables, fields or types on line above. Default is true.
    #strict-append: true
    # Allow calls and assignments to be cuddled as long as the lines have any
    # matching variables, fields or types. Default is true.
    #allow-assign-and-call: true
    # Allow multiline assignments to be cuddled. Default is true.
    #allow-multiline-assign: true
    # Allow declarations (var) to be cuddled.
    #allow-cuddle-declarations: false
    # Allow trailing comments in ending of blocks
    allow-trailing-comment: true
    # Force newlines in end of case at this limit (0 = never).
    #force-case-trailing-whitespace: 0
    # Force cuddling of err checks with err var assignment
    #force-err-cuddling: false
    # Allow leading comments to be separated with empty lines
    allow-separated-leading-comment: true

  # The custom section can be used to define linter plugins to be loaded at runtime. See README doc
  #  for more info.
  #custom:
    # Each custom linter should have a unique name.
     #example:
      # The path to the plugin *.so. Can be absolute or local. Required for each custom linter
      #path: /path/to/example.so
      # The description of the linter. Optional, just for documentation purposes.
      #description: This is an example usage of a plugin linter.
      # Intended to point to the repo location of the linter. Optional, just for documentation purposes.
      #original-url: github.com/golangci/example-linter

  nilnil:
    # Checks that there is no simultaneous return of `nil` error and an invalid value.
    # Default: ptr, func, iface, map, chan
    checked-types:
      - ptr
      - func
      - iface
      - map
      - chan

  errorlint:
    # Check whether fmt.Errorf uses the %w verb for formatting errors.
    # See the https://github.com/polyfloyd/go-errorlint for caveats.
    # Default: true
    errorf: true
    # Permit more than 1 %w verb, valid per Go 1.20 (Requires errorf:true)
    # Default: true
    errorf-multi: true
    # Check for plain type assertions and type switches.
    # Default: true
    asserts: true
    # Check for plain error comparisons.
    # Default: true
    comparison: true

  thelper:
    # The following configurations enable all checks.
    # All checks are enabled by default.
    test:
      first: false
      name: false
      begin: false
    benchmark:
      first: false
      name: false
      begin: false
    tb:
      first: false
      name: false
      begin: false

linters:
  enable:
    - govet
    - errcheck
    - staticcheck
    - typecheck
    - ineffassign
    - gosimple
    - unused
    - nolintlint
    - gofmt
    - gocritic

    - rowserrcheck
    - unparam
    - unconvert
    - gosec
    - revive
    - godox
    - gomnd
    - asciicheck
    - misspell
    - nakedret

    - nilerr
    - nilnil
    - thelper
    - errorlint
    - durationcheck
    - asasalint
    - gocheckcompilerdirectives
    - mirror
    - musttag
    - goerr113

    - makezero
    - zerologlint
    - bidichk
    - tagalign
    - wastedassign
    - wsl
    - prealloc
    - predeclared
    - promlinter
    #- godot

#  disable:
#    - maligned
  disable-all: true
#  presets:
#    - bugs
#    - unused
  fast: false


issues:
  # List of regexps of issue texts to exclude, empty list by default.
  # But independently from this option we use default exclude patterns,
  # it can be disabled by `exclude-use-default: false`. To list all
  # excluded by default patterns execute `golangci-lint run --help`
  #exclude:
    #- abcdef

  # Excluding configuration per-path, per-linter, per-text and per-source
  exclude-rules:
    # Exclude some linters from running on tests files.
    - path: _test\.go
      linters:
        - funlen # often test files  holds test data inside function
        #- wsl
        #- lll
        #- errcheck
        #- dupl
        #- gosec

    # Exclude known linters from partially hard-vendored code,
    # which is impossible to exclude via "nolint" comments.
    #- path: internal/hmac/
      #text: "weak cryptographic primitive"
      #linters:
        #- gosec

    # Exclude linter specific messages
    #- linters:
        #- staticcheck
      #text: "SA9003:"

    # Exclude golint package comments
    #- linters:
        #- golint
      #text: "should have a package comment"

    # Exclude lll issues for long lines with go:generate
    #- linters:
        #- lll
      #source: "^//go:generate "

  # Independently from option `exclude` we use default exclude patterns,
  # it can be disabled by this option. To list all
  # excluded by default patterns execute `golangci-lint run --help`.
  # Default value for this option is true.
  exclude-use-default: false

  # The default value is false. If set to true exclude and exclude-rules
  # regular expressions become case sensitive.
  exclude-case-sensitive: false

  # The list of ids of default excludes to include or disable. By default it's empty.
  #include:
    #- EXC0002 # disable excluding of issues about comments from golint

  # Maximum issues count per one linter. Set to 0 to disable. Default is 50.
  max-issues-per-linter: 0

  # Maximum count of issues with the same text. Set to 0 to disable. Default is 3.
  max-same-issues: 0

  # Show only new issues: if there are unstaged changes or untracked files,
  # only those changes are analyzed, else only changes in HEAD~ are analyzed.
  # It's a super-useful option for integration of golangci-lint into existing
  # large codebase. It's not practical to fix all existing issues at the moment
  # of integration: much better don't allow issues in new code.
  # Default is false.
  new: false

  # Show only new issues created after git revision `REV`
  #new-from-rev: REV

  # Show only new issues created in git patch with set file path.
  #new-from-patch: path/to/patch/file

severity:
  # Default value is empty string.
  # Set the default severity for issues. If severity rules are defined and the issues
  # do not match or no severity is provided to the rule this will be the default
  # severity applied. Severities should match the supported severity names of the
  # selected out format.
  # - Code climate: https://docs.codeclimate.com/docs/issues#issue-severity
  # -   Checkstyle: https://checkstyle.sourceforge.io/property_types.html#severity
  # -       Github: https://help.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-an-error-message
  default-severity: error

  # The default value is false.
  # If set to true severity-rules regular expressions become case sensitive.
  case-sensitive: false

  # Default value is empty list.
  # When a list of severity rules are provided, severity information will be added to lint
  # issues. Severity rules have the same filtering capability as exclude rules except you
  # are allowed to specify one matcher per severity rule.
  # Only affects out formats that support setting severity information.
  #rules:
    #- linters:
      #- dupl
      #severity: info
